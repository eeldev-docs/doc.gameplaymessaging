"use strict";(globalThis.webpackChunkmy_website=globalThis.webpackChunkmy_website||[]).push([[562],{1523:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/open_door_closed-9040a6056b378a3ce1bdd8eddfa04d86.png"},1728:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/open_door_open_button-f53bbb999cec2a35bb531fcb941c59b1.png"},2804:(e,n,t)=>{t(6540),t(2303);t(4848)},3210:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"doc/examples/open_door_button","title":"Opening a Door (Button)","description":"This guide demonstrates how to use gameplay events in the Gameplay Messaging System to trigger opening and closing a door in your Unreal Engine project using a button interaction. We\'ll create gameplay tags, define a data payload struct, set up event listeners in the Door Actor, and configure a Button Actor to broadcast messages that control the door\'s behavior.","source":"@site/docs/doc/examples/open_door_button.md","sourceDirName":"doc/examples","slug":"/doc/examples/open_door_button","permalink":"/doc/examples/open_door_button","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/doc/examples/open_door_button.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"steamCoreSidebar","previous":{"title":"Opening a Door (Trigger)","permalink":"/doc/examples/open_door"},"next":{"title":"Configuring Logging","permalink":"/logging"}}');var r=t(4848),o=t(8453);t(2804),t(5594);const i={sidebar_position:2},a="Opening a Door (Button)",l={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Create Gameplay Tags",id:"step-1-create-gameplay-tags",level:2},{value:"Step 2: Create a Payload Struct",id:"step-2-create-a-payload-struct",level:2},{value:"Step 3: Set Up the Door and Button Actors",id:"step-3-set-up-the-door-and-button-actors",level:2},{value:"Step 4: Test the Setup",id:"step-4-test-the-setup",level:2},{value:"Results",id:"results",level:2},{value:"Additional Notes",id:"additional-notes",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"opening-a-door-button",children:"Opening a Door (Button)"})}),"\n",(0,r.jsx)(n.p,{children:"This guide demonstrates how to use gameplay events in the Gameplay Messaging System to trigger opening and closing a door in your Unreal Engine project using a button interaction. We'll create gameplay tags, define a data payload struct, set up event listeners in the Door Actor, and configure a Button Actor to broadcast messages that control the door's behavior."}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Unreal Engine Project"}),": Ensure you have a project with the Gameplay Messaging System plugin installed and enabled (see ",(0,r.jsx)(n.a,{href:"/doc/getting-started/introduction",children:"Installing the Plugin"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Door Actor"}),": A Door Actor with a static mesh component that can be moved or animated to represent open and closed states."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Button Actor"}),": An Actor (e.g., a button or interactable object) with a mechanism to trigger events, such as a key press or interaction component."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Basic Blueprint Knowledge"}),": Familiarity with Unreal Engine Blueprints, including creating structs, gameplay tags, and event-driven logic."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"step-1-create-gameplay-tags",children:"Step 1: Create Gameplay Tags"}),"\n",(0,r.jsx)(n.p,{children:"Gameplay tags are used to identify and trigger specific events in the Gameplay Messaging System. We'll create a tag for the door trigger event."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Navigate to Gameplay Tags Settings"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Open ",(0,r.jsx)(n.strong,{children:"Project Settings"})," from the Unreal Editor's top menu."]}),"\n",(0,r.jsxs)(n.li,{children:["Go to ",(0,r.jsx)(n.strong,{children:"GameplayTags"})," under the ",(0,r.jsx)(n.strong,{children:"Game"})," category.\r\n",(0,r.jsx)(n.img,{alt:"Gameplay Tags Settings",src:t(4792).A+"",width:"2347",height:"778"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Add a New Tag"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Click ",(0,r.jsx)(n.strong,{children:"Add New Tag"})," or the ",(0,r.jsx)(n.strong,{children:"+"})," button in the Gameplay Tags section."]}),"\n",(0,r.jsxs)(n.li,{children:["Create a new tag named ",(0,r.jsx)(n.code,{children:"Gameplay.Trigger.Door"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tip"}),": Use descriptive names to keep tags organized, especially in projects with multiple tags.\r\n",(0,r.jsx)(n.img,{alt:"New Gameplay Tag",src:t(4795).A+"",width:"1016",height:"783"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Save Changes"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ensure the tag is saved in the Gameplay Tags list. This tag will serve as the channel for triggering door events."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"step-2-create-a-payload-struct",children:"Step 2: Create a Payload Struct"}),"\n",(0,r.jsx)(n.p,{children:"To send data with the gameplay event (e.g., whether the door should open or close), we'll create a struct to act as the payload."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Create a New Struct"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["In the ",(0,r.jsx)(n.strong,{children:"Content Browser"}),", right-click and select ",(0,r.jsx)(n.strong,{children:"Blueprint"})," > ",(0,r.jsx)(n.strong,{children:"Structure"})," to create a new struct."]}),"\n",(0,r.jsxs)(n.li,{children:["Name it descriptively, such as ",(0,r.jsx)(n.code,{children:"DoorStatePayload"}),".\r\n",(0,r.jsx)(n.img,{alt:"Create Struct",src:t(9973).A+"",width:"747",height:"1028"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Define Struct Variables"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Open the struct in the Blueprint editor."}),"\n",(0,r.jsxs)(n.li,{children:["Add a ",(0,r.jsx)(n.strong,{children:"Boolean"})," variable named ",(0,r.jsx)(n.code,{children:"IsOpen"})," (or similar) to indicate the door\u2019s state (",(0,r.jsx)(n.code,{children:"true"})," for open, ",(0,r.jsx)(n.code,{children:"false"})," for closed)."]}),"\n",(0,r.jsxs)(n.li,{children:["Save and compile the struct.\r\n",(0,r.jsx)(n.img,{alt:"Struct Door State",src:t(6228).A+"",width:"1252",height:"745"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"step-3-set-up-the-door-and-button-actors",children:"Step 3: Set Up the Door and Button Actors"}),"\n",(0,r.jsx)(n.p,{children:"The Door Actor will listen for gameplay messages, while the Button Actor will broadcast messages to trigger the door\u2019s open/close behavior."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Configure BeginPlay in the Door Actor"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Open the Door Actor\u2019s Blueprint."}),"\n",(0,r.jsxs)(n.li,{children:["In the ",(0,r.jsx)(n.strong,{children:"Event BeginPlay"})," node, add a ",(0,r.jsx)(n.strong,{children:"Listen for Gameplay Messages"})," node."]}),"\n",(0,r.jsxs)(n.li,{children:["Set the following parameters:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Channel"}),": Set to the ",(0,r.jsx)(n.code,{children:"Gameplay.Trigger.Door"})," tag created earlier."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Payload Type"}),": Select the ",(0,r.jsx)(n.code,{children:"DoorStatePayload"})," struct."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["This node enables the Door Actor to listen for events triggered on the specified tag and process the associated payload.\r\n",(0,r.jsx)(n.img,{alt:"BeginPlay Setup",src:t(8043).A+"",width:"1477",height:"393"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Configure the Button Actor"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Open the Button Actor\u2019s Blueprint (e.g., a button, lever, or interactable object)."}),"\n",(0,r.jsxs)(n.li,{children:["Add logic to trigger the door event, such as an ",(0,r.jsx)(n.strong,{children:"OnInteract"}),' event or a key press (e.g., pressing the "E" key).']}),"\n",(0,r.jsxs)(n.li,{children:["Add a ",(0,r.jsx)(n.strong,{children:"Broadcast Gameplay Message"})," node to send the event."]}),"\n",(0,r.jsxs)(n.li,{children:["Set the following parameters:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Channel"}),": Set to ",(0,r.jsx)(n.code,{children:"Gameplay.Trigger.Door"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Payload"}),": Create a new instance of the ",(0,r.jsx)(n.code,{children:"DoorStatePayload"})," struct."]}),"\n",(0,r.jsxs)(n.li,{children:["Set the ",(0,r.jsx)(n.code,{children:"IsOpen"})," variable to ",(0,r.jsx)(n.code,{children:"true"})," to open the door or ",(0,r.jsx)(n.code,{children:"false"})," to close it (you can toggle this based on the current door state or use separate interactions for open/close)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Example"}),": If the button toggles the door state, use a boolean variable to track the current state and flip it on each interaction.\r\n",(0,r.jsx)(n.img,{alt:"Button Broadcast",src:t(7391).A+"",width:"1125",height:"598"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Handle Open/Close Logic in the Door Actor"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["When the ",(0,r.jsx)(n.strong,{children:"Listen for Gameplay Messages"})," node receives a message, it outputs the ",(0,r.jsx)(n.code,{children:"DoorStatePayload"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Use the ",(0,r.jsx)(n.code,{children:"IsOpen"})," boolean from the payload to determine the door\u2019s behavior:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"IsOpen"})," is ",(0,r.jsx)(n.code,{children:"true"}),", move or animate the door\u2019s static mesh to the ",(0,r.jsx)(n.strong,{children:"open"})," position."]}),"\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"IsOpen"})," is ",(0,r.jsx)(n.code,{children:"false"}),", move or animate the door\u2019s static mesh to the ",(0,r.jsx)(n.strong,{children:"closed"})," position."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Example: Use a ",(0,r.jsx)(n.strong,{children:"Set Relative Location"})," or ",(0,r.jsx)(n.strong,{children:"Add Relative Rotation"})," node to adjust the door\u2019s static mesh component.\r\n",(0,r.jsx)(n.img,{alt:"Open/Close Events",src:t(7724).A+"",width:"1481",height:"861"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"step-4-test-the-setup",children:"Step 4: Test the Setup"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Place Actors in the Level"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Add the Door Actor and Button Actor to your level."}),"\n",(0,r.jsx)(n.li,{children:"Ensure the Button Actor is interactable (e.g., has a collision component or interaction system) and is positioned where the player can access it."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Playtest"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Run the game in the Unreal Editor."}),"\n",(0,r.jsxs)(n.li,{children:['Interact with the Button Actor (e.g., press "E" or click the button) to trigger the ',(0,r.jsx)(n.strong,{children:"Broadcast Gameplay Message"})," node."]}),"\n",(0,r.jsxs)(n.li,{children:["Verify that the door opens or closes based on the ",(0,r.jsx)(n.code,{children:"IsOpen"})," value in the payload."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"results",children:"Results"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Closed State"}),": The door remains closed when no interaction has occurred or when the button sends a ",(0,r.jsx)(n.code,{children:"false"})," payload.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.img,{alt:"Door Closed",src:t(1523).A+"",width:"1285",height:"772"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Open State"}),": The door opens when the button sends a ",(0,r.jsx)(n.code,{children:"true"})," payload.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.img,{alt:"Door Open",src:t(1728).A+"",width:"1283",height:"771"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"additional-notes",children:"Additional Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Button Interaction"}),": Customize the button\u2019s interaction mechanism (e.g., key press, mouse click, or proximity trigger) based on your game\u2019s design."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Toggle Logic"}),": For a single button that toggles the door state, store the current state in a variable and alternate between ",(0,r.jsx)(n.code,{children:"true"})," and ",(0,r.jsx)(n.code,{children:"false"})," in the Button Actor\u2019s logic."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Customization"}),": Expand the ",(0,r.jsx)(n.code,{children:"DoorStatePayload"})," struct to include additional data, such as door animation speed, sound effects, or a specific door ID for targeting multiple doors."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Optimization"}),": Ensure the Button Actor\u2019s interaction system is efficient (e.g., use appropriate collision settings or interaction components)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Debugging"}),": If the door doesn\u2019t respond:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Verify the ",(0,r.jsx)(n.code,{children:"Gameplay.Trigger.Door"})," tag is correctly set in both the ",(0,r.jsx)(n.strong,{children:"Broadcast Gameplay Message"})," and ",(0,r.jsx)(n.strong,{children:"Listen for Gameplay Messages"})," nodes."]}),"\n",(0,r.jsx)(n.li,{children:"Check that the payload struct is properly configured and passed."}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.strong,{children:"Print String"})," nodes to debug the button interaction and payload values."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Explore advanced features of the Gameplay Messaging System, such as broadcasting to multiple actors or handling networked events."}),"\n",(0,r.jsx)(n.li,{children:"Add visual or audio feedback to the button (e.g., a press animation or sound effect) to enhance the player experience."}),"\n",(0,r.jsx)(n.li,{children:"Experiment with complex interactions, such as requiring multiple button presses or combining with other triggers (e.g., pressure plates)."}),"\n",(0,r.jsx)(n.li,{children:"Refer to the plugin\u2019s official documentation on the Unreal Engine Marketplace for additional use cases and configuration options."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For further assistance, consult the plugin\u2019s documentation or contact the plugin developer through Marketplace support channels."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},4792:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/open_door_tags-9ce6db969a44f344984ac0265f0561c5.png"},4795:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/open_door_tags_2-23c1a1410ebdc456f8bb60a2863bcdc3.png"},5594:(e,n,t)=>{t(6540);t(4848)},6228:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/struct_doorstate-632367cb2115ca0f17b65a7992b345a7.png"},7391:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/open_door_button-5b1231dded697409b7b6c0cd2b3e945d.png"},7724:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/open_door_open_close_events-7030f4ce9f7141f01ddecd3846a1ed15.png"},8043:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/open_door_begin_play-15b1d211f533be1865331855e5848bec.png"},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}},9973:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/create_struct-c5763e8ef6678663d36562e655640770.png"}}]);